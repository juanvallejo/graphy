#!/usr/bin/env node

// local packages
var cmd = require('./pkg/cmd/cmd.js');
var modules = require('./pkg/module/module.js');
var tree = require('./pkg/tree/tree.js');
var flag = require('./pkg/cmd/flag/flag.js');

// settings
var root_cmd = 'openshift';
var modules_dir = __dirname + '/modules';
var use_module = null;
var module_args = [];

// receives command line objects (flags, args, vars)
function cmd_arg_handler(cli) {
    if (flag.hasFlag(cli.flags, 'help')) {
        return console.log(usage_output());
    }

	if (!flag.hasFlag(cli.flags, 'module')) {
		return console.log('ERR MissingModule: no default module exists, please specify a module to use with the "--module=" flag.');
	}

	var moduleFlag = flag.getFlag(cli.flags, 'module')
	use_module = moduleFlag.getValue();

	// retrieve module-specific args
	if(flag.hasFlag(cli.flags, use_module)) {
		var moduleArgs = flag.getFlag(cli.flags, use_module);
		module_args.push(moduleArgs.getValue());
	}

	if (flag.hasFlag(cli.flags, 'root')) {
		var rootFlag = flag.getFlag(cli.flags, 'root');
		root_cmd = rootFlag.getValue();
	}

	if (flag.hasFlag(cli.flags, 'modules_dir')) {
		var dirFlag = flag.getFlag(cli.flags, 'modules_dir');
		modules_dir = dirFlag.getValue();
	}


	modules.readAndImport(modules_dir, function(err, objs) {
		module_handler(err, objs, cli);
	});
}

// receives parsed json objects containing module data 
function module_handler(err, objs, cli) {
	if(err) {
		return console.log('error: unable to read modules from ' + modules_dir + ':', err);
	}

	var module = modules.getModuleByName(objs, use_module);
	if(module == null) {
		return console.log('ERR Unable to find a module with name "' + use_module + '"');
	}

	init_traversal(module, cli);
}

// initializes command tree traversal
// receives a Module object
function init_traversal(moduleObj) {
	tree.traverse(root_cmd, moduleObj, module_args);
}

// returns a string of usage help
function usage_output() {
    return "Usage: graphy [--root=openshift] --module=mymodule --mymodule=mymodule_args"
}

(function main(argv) {
	argv.splice(0,2);
	cmd.parseArgs(argv, cmd_arg_handler);
})(process.argv);
